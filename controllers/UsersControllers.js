import Bull from 'bull';
import SHA1 from 'SHA1';
import DBClient from '../utils/db';
import RedisClient from '../utils/redis';

const { ObjectId } = require('mongodb');


class UsersControllers{
    static async postNew(request, response) {

        const userEmail = request.body.email;
        if (!userEmail) return response.status(400).send({ error: 'Missing email'});

        const userPassword = request.body.password;
        if (!userPassword) return response.status(400).send({ error: 'Missing password'});

        const oldUserEmail = await DBClient.db.collection('users').findOne({ email: userEmail });
        if (oldUserEmail) return response.status(400).send({ error: 'Already exist' });

        const shaUserPassword = sha1(userPassword);
        const result = await DBClient.db.collection('users').insertOne({ email: userEmail, password: shaUserPassword });
        userQueue.add({
            userId: result.insertedId,
        });

        return response.status(201).send({ id: result.insertedId, email: userEmail });
    }
}

module.exports = UsersControllers;
To create a user, you must specify an email and a password
If the email is missing, return an error Missing email with a status code 400
If the password is missing, return an error Missing password with a status code 400
If the email already exists in DB, return an error Already exist with a status code 400
The password must be stored after being hashed in SHA1
The endpoint is returning the new user with only the email and the id (auto generated by MongoDB) with a status code 201
The new user must be saved in the collection users:
email: same as the value received
password: SHA1 value of the value received